package templates

// GetBuiltinTemplates returns the built-in Terraform templates
func GetBuiltinTemplates() map[string]string {
	return map[string]string{
		"project.tf":        projectTemplate,
		"networking.tf":     networkingTemplate,
		"compute.tf":        computeTemplate,
		"load_balancers.tf": loadBalancersTemplate,
		"iam.tf":           iamTemplate,
		"storage.tf":       storageTemplate,
		"variables.tf":     variablesTemplate,
		"outputs.tf":       outputsTemplate,
	}
}

const projectTemplate = `# Project Configuration
# Generated by custoodian

{{if .}}
# Configure the Google Cloud Provider
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
  }
}

provider "google" {
  project = {{ quote .Id }}
  region  = "us-central1"
  zone    = "us-central1-a"
}

# Create the project
resource "google_project" "project" {
  name            = {{ quote .Name }}
  project_id      = {{ quote .Id }}
  {{- if .BillingAccount}}
  billing_account = {{ quote .BillingAccount }}
  {{- end}}
  {{- if .OrganizationId}}
  org_id          = {{ quote .OrganizationId }}
  {{- end}}
  {{- if .FolderId}}
  folder_id       = {{ quote .FolderId }}
  {{- end}}
  
  {{- if .Labels}}
  labels = {
    {{- range $key, $value := .Labels}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}
}

{{- if .Apis}}
# Enable required APIs
{{- range $i, $api := .Apis}}
resource "google_project_service" "api_{{ $i }}" {
  project = google_project.project.project_id
  service = {{ quote (apiToString $api) }}

  disable_dependent_services = true
  disable_on_destroy         = false
}
{{- end}}
{{- end}}
{{end}}
`

const networkingTemplate = `# Networking Configuration
# Generated by custoodian

{{if .}}
{{- if .ReservedIps}}
# Reserved IP addresses
{{- range .ReservedIps}}
resource "google_compute_address" "{{ .Name }}" {
  name         = {{ quote .Name }}
  {{- if eq .Type.String "REGIONAL"}}
  address_type = "EXTERNAL"
  region       = {{ quote (regionToString .Region) }}
  {{- else}}
  address_type = "EXTERNAL"
  {{- end}}
  {{- if .Description}}
  description  = {{ quote .Description }}
  {{- end}}
  {{- if .NetworkTier}}
  network_tier = {{ quote (networkTierToString .NetworkTier) }}
  {{- end}}
}
{{- end}}
{{- end}}

{{- if .Vpcs}}
# VPC Networks
{{- range .Vpcs}}
resource "google_compute_network" "{{ .Name }}" {
  name                    = {{ quote .Name }}
  {{- if .Description}}
  description             = {{ quote .Description }}
  {{- end}}
  auto_create_subnetworks = {{ .AutoCreateSubnetworks }}
  {{- if .RoutingMode}}
  routing_mode            = {{ quote .RoutingMode }}
  {{- end}}
}

{{- if .Subnets}}
# Subnets for {{ .Name }}
{{- $vpcName := .Name }}
{{- range .Subnets}}
resource "google_compute_subnetwork" "{{ .Name }}" {
  name          = {{ quote .Name }}
  ip_cidr_range = {{ quote .Cidr }}
  region        = {{ quote (regionToString .Region) }}
  network       = google_compute_network.{{ $vpcName }}.id
  {{- if .Description}}
  description   = {{ quote .Description }}
  {{- end}}
  {{- if .PrivateIpGoogleAccess}}
  private_ip_google_access = {{ .PrivateIpGoogleAccess }}
  {{- end}}
  
  {{- if .SecondaryRanges}}
  {{- range .SecondaryRanges}}
  secondary_ip_range {
    range_name    = {{ quote .RangeName }}
    ip_cidr_range = {{ quote .IpCidrRange }}
  }
  {{- end}}
  {{- end}}
}
{{- end}}
{{- end}}
{{- end}}
{{- end}}

{{- if .FirewallRules}}
# Firewall Rules
{{- range .FirewallRules}}
resource "google_compute_firewall" "{{ .Name }}" {
  name        = {{ quote .Name }}
  network     = {{ quote .Network }}
  {{- if .Description}}
  description = {{ quote .Description }}
  {{- end}}
  direction   = {{ quote .Direction }}
  priority    = {{ .Priority }}
  
  {{- if .SourceRanges}}
  source_ranges = [
    {{- range .SourceRanges}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .DestinationRanges}}
  destination_ranges = [
    {{- range .DestinationRanges}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .SourceTags}}
  source_tags = [
    {{- range .SourceTags}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .TargetTags}}
  target_tags = [
    {{- range .TargetTags}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .Allow}}
  {{- range .Allow}}
  allow {
    protocol = {{ quote .Protocol }}
    {{- if .Ports}}
    ports    = [
      {{- range .Ports}}
      {{ quote . }},
      {{- end}}
    ]
    {{- end}}
  }
  {{- end}}
  {{- end}}
  
  {{- if .Deny}}
  {{- range .Deny}}
  deny {
    protocol = {{ quote .Protocol }}
    {{- if .Ports}}
    ports    = [
      {{- range .Ports}}
      {{ quote . }},
      {{- end}}
    ]
    {{- end}}
  }
  {{- end}}
  {{- end}}
}
{{- end}}
{{- end}}

{{- if .NatGateways}}
# Cloud NAT Gateways
{{- range .NatGateways}}
resource "google_compute_router_nat" "{{ .Name }}" {
  name   = {{ quote .Name }}
  router = {{ quote .Router }}
  region = {{ quote (regionToString .Region) }}

  nat_ip_allocate_option = {{ quote .NatIpAllocateOption }}
  
  {{- if .NatIps}}
  nat_ips = [
    {{- range .NatIps}}
    google_compute_address.{{ . }}.self_link,
    {{- end}}
  ]
  {{- end}}
  
  {{- if .SourceSubnetworkIpRangesToNat}}
  {{- range .SourceSubnetworkIpRangesToNat}}
  subnetwork {
    name                    = {{ quote .Name }}
    source_ip_ranges_to_nat = [
      {{- range .SourceIpRangesToNat}}
      {{ quote . }},
      {{- end}}
    ]
  }
  {{- end}}
  {{- end}}
}
{{- end}}
{{- end}}
{{end}}
`

const computeTemplate = `# Compute Configuration
# Generated by custoodian

{{if .}}
{{- if .InstanceTemplates}}
# Instance Templates
{{- range .InstanceTemplates}}
resource "google_compute_instance_template" "{{ .Name }}" {
  name         = {{ quote .Name }}
  {{- if .Description}}
  description  = {{ quote .Description }}
  {{- end}}
  machine_type = {{ quote (machineTypeToString .MachineType) }}
  
  disk {
    source_image = {{ quote .Image }}
    auto_delete  = true
    boot         = true
    {{- if .DiskSizeGb}}
    disk_size_gb = {{ .DiskSizeGb }}
    {{- end}}
    {{- if .DiskType}}
    disk_type    = {{ quote .DiskType.String }}
    {{- end}}
  }
  
  {{- if .NetworkInterfaces}}
  {{- range .NetworkInterfaces}}
  network_interface {
    {{- if .Network}}
    network = {{ quote .Network }}
    {{- end}}
    {{- if .Subnetwork}}
    subnetwork = {{ quote .Subnetwork }}
    {{- end}}
    
    {{- if .AccessConfigs}}
    {{- range .AccessConfigs}}
    access_config {
      {{- if .Type}}
      nat_ip = {{ quote .Type }}
      {{- end}}
      {{- if .NatIp}}
      nat_ip = google_compute_address.{{ .NatIp }}.address
      {{- end}}
      {{- if .NetworkTier}}
      network_tier = {{ quote (networkTierToString .NetworkTier) }}
      {{- end}}
    }
    {{- end}}
    {{- end}}
  }
  {{- end}}
  {{- end}}
  
  {{- if .ServiceAccount}}
  service_account {
    email = {{ quote .ServiceAccount }}
    scopes = [
      {{- if .Scopes}}
      {{- range .Scopes}}
      {{ quote . }},
      {{- end}}
      {{- else}}
      "https://www.googleapis.com/auth/cloud-platform",
      {{- end}}
    ]
  }
  {{- end}}
  
  {{- if or .Metadata .StartupScript}}
  metadata = {
    {{- range $key, $value := .Metadata}}
    {{- if eq $key "startup-script"}}
    {{ quote $key }} = <<-EOF
{{ unescapeNewlines $value }}
EOF
    {{- else}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
    {{- end}}
    {{- if .StartupScript}}
    startup-script = <<-EOF
{{ unescapeNewlines .StartupScript }}
EOF
    {{- end}}
  }
  {{- end}}
  
  {{- if .Tags}}
  tags = [
    {{- range .Tags}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .Labels}}
  labels = {
    {{- range $key, $value := .Labels}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}
  
  {{- if .Preemptible}}
  scheduling {
    preemptible = {{ .Preemptible }}
  }
  {{- end}}
}
{{- end}}
{{- end}}

{{- if .InstanceGroups}}
# Instance Groups
{{- range .InstanceGroups}}
resource "google_compute_instance_group_manager" "{{ .Name }}" {
  name               = {{ quote .Name }}
  {{- if .Description}}
  description        = {{ quote .Description }}
  {{- end}}
  {{- if .BaseInstanceName}}
  base_instance_name = {{ quote .BaseInstanceName }}
  {{- end}}
  target_size        = {{ .Size }}
  
  {{- if .Zones}}
  {{- $zoneCount := len .Zones}}
  {{- if eq $zoneCount 1}}
  zone = {{ quote (zoneToString (index .Zones 0)) }}
  {{- else}}
  # Multi-zone deployment
  zone = {{ quote (zoneToString (index .Zones 0)) }}
  {{- end}}
  {{- end}}
  
  version {
    instance_template = google_compute_instance_template.{{ .Template }}.id
  }
  
  {{- if .NamedPorts}}
  {{- range .NamedPorts}}
  named_port {
    name = {{ quote .Name }}
    port = {{ .Port }}
  }
  {{- end}}
  {{- end}}
}

{{- if .AutoScaling}}
# Auto Scaler for {{ .Name }}
resource "google_compute_autoscaler" "{{ .Name }}_autoscaler" {
  name   = "{{ .Name }}-autoscaler"
  {{- if .Zones}}
  zone   = {{ quote (zoneToString (index .Zones 0)) }}
  {{- end}}
  target = google_compute_instance_group_manager.{{ .Name }}.id

  autoscaling_policy {
    max_replicas    = {{ .AutoScaling.Max }}
    min_replicas    = {{ .AutoScaling.Min }}
    cooldown_period = {{ if .AutoScaling.CooldownPeriod }}{{ .AutoScaling.CooldownPeriod }}{{ else }}60{{ end }}

    cpu_utilization {
      target = {{ .AutoScaling.CpuTarget }}
    }
  }
}
{{- end}}
{{- end}}
{{- end}}

{{- if .Instances}}
# Individual Instances
{{- range .Instances}}
resource "google_compute_instance" "{{ .Name }}" {
  name         = {{ quote .Name }}
  machine_type = {{ quote (machineTypeToString .MachineType) }}
  zone         = {{ quote (zoneToString .Zone) }}

  boot_disk {
    initialize_params {
      image = {{ quote .Image }}
    }
  }

  {{- if .NetworkInterfaces}}
  {{- range .NetworkInterfaces}}
  network_interface {
    {{- if .Network}}
    network = {{ quote .Network }}
    {{- end}}
    {{- if .Subnetwork}}
    subnetwork = {{ quote .Subnetwork }}
    {{- end}}
    
    {{- if .AccessConfigs}}
    {{- range .AccessConfigs}}
    access_config {
      {{- if .NatIp}}
      nat_ip = google_compute_address.{{ .NatIp }}.address
      {{- end}}
    }
    {{- end}}
    {{- end}}
  }
  {{- end}}
  {{- end}}

  {{- if .ServiceAccount}}
  service_account {
    email  = {{ quote .ServiceAccount }}
    scopes = ["https://www.googleapis.com/auth/cloud-platform"]
  }
  {{- end}}

  {{- if .Metadata}}
  metadata = {
    {{- range $key, $value := .Metadata}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}

  {{- if .Tags}}
  tags = [
    {{- range .Tags}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
}
{{- end}}
{{- end}}
{{end}}
`

const loadBalancersTemplate = `# Load Balancers Configuration
# Generated by custoodian

{{if .}}
{{- range .}}
# Load Balancer: {{ .Name }}
resource "google_compute_global_forwarding_rule" "{{ .Name }}" {
  name       = {{ quote .Name }}
  target     = google_compute_target_http_proxy.{{ .Name }}.id
  {{- if .Ip}}
  ip_address = google_compute_address.{{ .Ip }}.address
  {{- end}}
  {{- if .PortRange}}
  port_range = {{ quote .PortRange }}
  {{- end}}
}

resource "google_compute_target_http_proxy" "{{ .Name }}" {
  name    = "{{ .Name }}-proxy"
  url_map = google_compute_url_map.{{ .Name }}.id
}

resource "google_compute_url_map" "{{ .Name }}" {
  name            = "{{ .Name }}-url-map"
  default_service = google_compute_backend_service.{{ .Name }}.id
}

resource "google_compute_backend_service" "{{ .Name }}" {
  name        = "{{ .Name }}-backend"
  protocol    = "HTTP"
  timeout_sec = 10

  backend {
    group = {{ quote .Backend }}
  }

  {{- if .HealthCheck}}
  health_checks = [google_compute_health_check.{{ .HealthCheck.Name }}.id]
  {{- end}}
}

{{- if .HealthCheck}}
resource "google_compute_health_check" "{{ .HealthCheck.Name }}" {
  name = {{ quote .HealthCheck.Name }}

  {{- if eq .HealthCheck.Type "HTTP"}}
  http_health_check {
    {{- if .HealthCheck.Port}}
    port         = {{ .HealthCheck.Port }}
    {{- end}}
    {{- if .HealthCheck.RequestPath}}
    request_path = {{ quote .HealthCheck.RequestPath }}
    {{- end}}
  }
  {{- else if eq .HealthCheck.Type "HTTPS"}}
  https_health_check {
    {{- if .HealthCheck.Port}}
    port         = {{ .HealthCheck.Port }}
    {{- end}}
    {{- if .HealthCheck.RequestPath}}
    request_path = {{ quote .HealthCheck.RequestPath }}
    {{- end}}
  }
  {{- else if eq .HealthCheck.Type "TCP"}}
  tcp_health_check {
    {{- if .HealthCheck.Port}}
    port = {{ .HealthCheck.Port }}
    {{- end}}
  }
  {{- end}}

  {{- if .HealthCheck.CheckIntervalSec}}
  check_interval_sec  = {{ .HealthCheck.CheckIntervalSec }}
  {{- end}}
  {{- if .HealthCheck.TimeoutSec}}
  timeout_sec         = {{ .HealthCheck.TimeoutSec }}
  {{- end}}
  {{- if .HealthCheck.HealthyThreshold}}
  healthy_threshold   = {{ .HealthCheck.HealthyThreshold }}
  {{- end}}
  {{- if .HealthCheck.UnhealthyThreshold}}
  unhealthy_threshold = {{ .HealthCheck.UnhealthyThreshold }}
  {{- end}}
}
{{- end}}
{{- end}}
{{end}}
`

const iamTemplate = `# IAM Configuration
# Generated by custoodian

{{if .}}
{{- if .ServiceAccounts}}
# Service Accounts
{{- range .ServiceAccounts}}
resource "google_service_account" "{{ .AccountId }}" {
  account_id   = {{ quote .AccountId }}
  {{- if .DisplayName}}
  display_name = {{ quote .DisplayName }}
  {{- end}}
  {{- if .Description}}
  description  = {{ quote .Description }}
  {{- end}}
}

{{- if .Roles}}
# Service Account IAM Bindings for {{ .AccountId }}
{{- $accountId := .AccountId }}
{{- range $i, $role := .Roles}}
resource "google_project_iam_member" "{{ $accountId }}_{{ $i }}" {
  project = var.project_id
  role    = {{ quote $role }}
  member  = "serviceAccount:${google_service_account.{{ $accountId }}.email}"
}
{{- end}}
{{- end}}

{{- if .GenerateKey}}
# Service Account Key for {{ .AccountId }}
resource "google_service_account_key" "{{ .AccountId }}_key" {
  service_account_id = google_service_account.{{ .AccountId }}.name
}
{{- end}}
{{- end}}
{{- end}}

{{- if .RoleBindings}}
# IAM Role Bindings
{{- range $i, $binding := .RoleBindings}}
resource "google_project_iam_binding" "binding_{{ $i }}" {
  project = var.project_id
  role    = {{ quote $binding.Role }}

  members = [
    {{- range $binding.Members}}
    {{ quote . }},
    {{- end}}
  ]
  
  {{- if $binding.Condition}}
  condition {
    title       = {{ quote $binding.Condition.Title }}
    description = {{ quote $binding.Condition.Description }}
    expression  = {{ quote $binding.Condition.Expression }}
  }
  {{- end}}
}
{{- end}}
{{- end}}

{{- if .CustomRoles}}
# Custom IAM Roles
{{- range .CustomRoles}}
resource "google_project_iam_custom_role" "{{ .RoleId }}" {
  role_id     = {{ quote .RoleId }}
  title       = {{ quote .Title }}
  {{- if .Description}}
  description = {{ quote .Description }}
  {{- end}}
  {{- if .Stage}}
  stage       = {{ quote .Stage }}
  {{- end}}
  permissions = [
    {{- range .Permissions}}
    {{ quote . }},
    {{- end}}
  ]
}
{{- end}}
{{- end}}
{{end}}
`

const storageTemplate = `# Storage Configuration
# Generated by custoodian

{{if .}}
{{- if .Buckets}}
# Cloud Storage Buckets
{{- range .Buckets}}
resource "google_storage_bucket" "{{ .Name }}" {
  name          = {{ quote .Name }}
  location      = {{ quote .Location }}
  {{- if .StorageClass}}
  storage_class = {{ quote .StorageClass }}
  {{- end}}

  {{- if .UniformBucketLevelAccess}}
  uniform_bucket_level_access = {{ .UniformBucketLevelAccess }}
  {{- end}}

  {{- if .Versioning}}
  versioning {
    enabled = {{ .Versioning }}
  }
  {{- end}}

  {{- if .Labels}}
  labels = {
    {{- range $key, $value := .Labels}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}

  {{- if .LifecycleRules}}
  {{- range .LifecycleRules}}
  lifecycle_rule {
    action {
      type = {{ quote .Action.Type }}
      {{- if .Action.StorageClass}}
      storage_class = {{ quote .Action.StorageClass }}
      {{- end}}
    }

    condition {
      {{- if .Condition.Age}}
      age = {{ .Condition.Age }}
      {{- end}}
      {{- if .Condition.CreatedBefore}}
      created_before = {{ quote .Condition.CreatedBefore }}
      {{- end}}
      {{- if .Condition.MatchesStorageClass}}
      matches_storage_class = [
        {{- range .Condition.MatchesStorageClass}}
        {{ quote . }},
        {{- end}}
      ]
      {{- end}}
    }
  }
  {{- end}}
  {{- end}}
}
{{- end}}
{{- end}}
{{end}}
`

const variablesTemplate = `# Variables
# Generated by custoodian

variable "project_id" {
  description = "The GCP project ID"
  type        = string
  {{- if .Project}}
  default     = {{ quote .Project.Id }}
  {{- end}}
}

variable "region" {
  description = "The default GCP region"
  type        = string
  default     = "us-central1"
}

variable "zone" {
  description = "The default GCP zone"
  type        = string
  default     = "us-central1-a"
}
`

const outputsTemplate = `# Outputs
# Generated by custoodian

{{if .Project}}
output "project_id" {
  description = "The GCP project ID"
  value       = google_project.project.project_id
}

output "project_number" {
  description = "The GCP project number"
  value       = google_project.project.number
}
{{end}}

{{if .Networking}}
{{- if .Networking.ReservedIps}}
# Reserved IP addresses
{{- range .Networking.ReservedIps}}
output "{{ .Name }}_ip_address" {
  description = "The IP address of {{ .Name }}"
  value       = google_compute_address.{{ .Name }}.address
}
{{- end}}
{{- end}}

{{- if .Networking.Vpcs}}
# VPC networks
{{- range .Networking.Vpcs}}
output "{{ .Name }}_network_id" {
  description = "The ID of the {{ .Name }} network"
  value       = google_compute_network.{{ .Name }}.id
}

output "{{ .Name }}_network_self_link" {
  description = "The self link of the {{ .Name }} network"
  value       = google_compute_network.{{ .Name }}.self_link
}

{{- if .Subnets}}
{{- range .Subnets}}
output "{{ .Name }}_subnet_id" {
  description = "The ID of the {{ .Name }} subnet"
  value       = google_compute_subnetwork.{{ .Name }}.id
}
{{- end}}
{{- end}}
{{- end}}
{{- end}}
{{end}}

{{if .Iam}}
{{- if .Iam.ServiceAccounts}}
# Service account outputs
{{- range .Iam.ServiceAccounts}}
output "{{ .AccountId }}_email" {
  description = "The email address of the {{ .AccountId }} service account"
  value       = google_service_account.{{ .AccountId }}.email
}

{{- if .GenerateKey}}
output "{{ .AccountId }}_key" {
  description = "The private key for the {{ .AccountId }} service account"
  value       = google_service_account_key.{{ .AccountId }}_key.private_key
  sensitive   = true
}
{{- end}}
{{- end}}
{{- end}}
{{end}}
`