package templates

// GetBuiltinTemplates returns the built-in Terraform templates
func GetBuiltinTemplates() map[string]string {
	return map[string]string{
		"project.tf":        projectTemplate,
		"networking.tf":     networkingTemplate,
		"compute.tf":        computeTemplate,
		"load_balancers.tf": loadBalancersTemplate,
		"iam.tf":            iamTemplate,
		"storage.tf":        storageTemplate,
		"cloud_run.tf":      cloudRunTemplate,
		"databases.tf":      databasesTemplate,
		"secret_manager.tf": secretManagerTemplate,
		"variables.tf":      variablesTemplate,
		"outputs.tf":        outputsTemplate,
	}
}

const projectTemplate = `# Project Configuration
# Generated by custoodian

{{if .}}
# Configure the Google Cloud Provider
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
  }
}

provider "google" {
  project = {{ quote .Id }}
  region  = "us-central1"
  zone    = "us-central1-a"
}

# Create the project
resource "google_project" "project" {
  name            = {{ quote .Name }}
  project_id      = {{ quote .Id }}
  {{- if .BillingAccount}}
  billing_account = {{ quote .BillingAccount }}
  {{- end}}
  {{- if .OrganizationId}}
  org_id          = {{ quote .OrganizationId }}
  {{- end}}
  {{- if .FolderId}}
  folder_id       = {{ quote .FolderId }}
  {{- end}}
  
  {{- if .Labels}}
  labels = {
    {{- range $key, $value := .Labels}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}
}

{{- if .Apis}}
# Enable required APIs
{{- range $i, $api := .Apis}}
resource "google_project_service" "api_{{ $i }}" {
  project = google_project.project.project_id
  service = {{ quote (apiToString $api) }}

  disable_dependent_services = true
  disable_on_destroy         = false
}
{{- end}}
{{- end}}
{{end}}
`

const networkingTemplate = `# Networking Configuration
# Generated by custoodian

{{- $data := .Data -}}
{{- $deps := .Dependencies -}}
{{if $data}}
{{- if $data.ReservedIps}}
# Reserved IP addresses
{{- range $data.ReservedIps}}
resource "google_compute_address" "{{ .Name }}" {
  name         = {{ quote .Name }}
  {{- if eq .Type.String "REGIONAL"}}
  address_type = "EXTERNAL"
  region       = {{ quote (regionToString .Region) }}
  {{- else}}
  address_type = "EXTERNAL"
  {{- end}}
  {{- if .Description}}
  description  = {{ quote .Description }}
  {{- end}}
  {{- if .NetworkTier}}
  network_tier = {{ quote (networkTierToString .NetworkTier) }}
  {{- end}}
}
{{- end}}
{{- end}}

{{- if $data.Vpcs}}
# VPC Networks
{{- range $data.Vpcs}}
resource "google_compute_network" "{{ .Name }}" {
  name                    = {{ quote .Name }}
  {{- if .Description}}
  description             = {{ quote .Description }}
  {{- end}}
  auto_create_subnetworks = {{ .AutoCreateSubnetworks }}
  {{- if .RoutingMode}}
  routing_mode            = {{ quote .RoutingMode }}
  {{- end}}
  
  {{- if $deps.RequiresProjectAPIs}}
  # Wait for project APIs to be enabled
  depends_on = [
    {{- range $i, $api := $deps.ProjectAPIs}}
    {{- if $i}},{{end}}
    google_project_service.api_{{ $i }}
    {{- end}}
  ]
  {{- end}}
}

{{- if .Subnets}}
# Subnets for {{ .Name }}
{{- $vpcName := .Name }}
{{- range .Subnets}}
resource "google_compute_subnetwork" "{{ .Name }}" {
  name          = {{ quote .Name }}
  ip_cidr_range = {{ quote .Cidr }}
  region        = {{ quote (regionToString .Region) }}
  network       = google_compute_network.{{ $vpcName }}.id
  {{- if .Description}}
  description   = {{ quote .Description }}
  {{- end}}
  {{- if .PrivateIpGoogleAccess}}
  private_ip_google_access = {{ .PrivateIpGoogleAccess }}
  {{- end}}
  
  {{- if .SecondaryRanges}}
  {{- range .SecondaryRanges}}
  secondary_ip_range {
    range_name    = {{ quote .RangeName }}
    ip_cidr_range = {{ quote .IpCidrRange }}
  }
  {{- end}}
  {{- end}}
}
{{- end}}
{{- end}}
{{- end}}
{{- end}}

{{- if $data.FirewallRules}}
# Firewall Rules
{{- range $data.FirewallRules}}
{{- $rule := . }}
resource "google_compute_firewall" "{{ .Name }}" {
  name        = {{ quote .Name }}
  {{- /* Use resource reference if network is defined in this config, otherwise use string */}}
  {{- $networkFound := false }}
  {{- range $data.Vpcs }}
    {{- if eq .Name $rule.Network }}
      {{- $networkFound = true }}
  network     = google_compute_network.{{ $rule.Network }}.name
    {{- end }}
  {{- end }}
  {{- if not $networkFound }}
  network     = {{ quote $rule.Network }}
  {{- end }}
  {{- if .Description}}
  description = {{ quote .Description }}
  {{- end}}
  direction   = {{ quote .Direction }}
  priority    = {{ .Priority }}
  
  {{- if .SourceRanges}}
  source_ranges = [
    {{- range .SourceRanges}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .DestinationRanges}}
  destination_ranges = [
    {{- range .DestinationRanges}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .SourceTags}}
  source_tags = [
    {{- range .SourceTags}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .TargetTags}}
  target_tags = [
    {{- range .TargetTags}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .Allow}}
  {{- range .Allow}}
  allow {
    protocol = {{ quote .Protocol }}
    {{- if .Ports}}
    ports    = [
      {{- range .Ports}}
      {{ quote . }},
      {{- end}}
    ]
    {{- end}}
  }
  {{- end}}
  {{- end}}
  
  {{- if .Deny}}
  {{- range .Deny}}
  deny {
    protocol = {{ quote .Protocol }}
    {{- if .Ports}}
    ports    = [
      {{- range .Ports}}
      {{ quote . }},
      {{- end}}
    ]
    {{- end}}
  }
  {{- end}}
  {{- end}}
  
  {{- /* Add dependency on the network if it's defined in this config */}}
  {{- $networkFound := false }}
  {{- range $data.Vpcs }}
    {{- if eq .Name $rule.Network }}
      {{- $networkFound = true }}
  depends_on = [google_compute_network.{{ $rule.Network }}]
    {{- end }}
  {{- end }}
}
{{- end}}
{{- end}}

{{- if $data.NatGateways}}
# Cloud NAT Gateways
{{- range $data.NatGateways}}
resource "google_compute_router_nat" "{{ .Name }}" {
  name   = {{ quote .Name }}
  router = {{ quote .Router }}
  region = {{ quote (regionToString .Region) }}

  nat_ip_allocate_option = {{ quote .NatIpAllocateOption }}
  
  {{- if .NatIps}}
  nat_ips = [
    {{- range .NatIps}}
    google_compute_address.{{ . }}.self_link,
    {{- end}}
  ]
  {{- end}}
  
  {{- if .SourceSubnetworkIpRangesToNat}}
  source_subnetwork_ip_ranges_to_nat = "LIST_OF_SUBNETWORKS"
  {{- range .SourceSubnetworkIpRangesToNat}}
  subnetwork {
    name                    = {{ quote .Name }}
    source_ip_ranges_to_nat = [
      {{- range .SourceIpRangesToNat}}
      {{ quote . }},
      {{- end}}
    ]
  }
  {{- end}}
  {{- end}}
}
{{- end}}
{{- end}}
{{end}}
`

const computeTemplate = `# Compute Configuration
# Generated by custoodian

{{- $data := .Data -}}
{{- $deps := .Dependencies -}}
{{if $data}}
{{- if $data.InstanceTemplates}}
# Instance Templates
{{- range $data.InstanceTemplates}}
resource "google_compute_instance_template" "{{ .Name }}" {
  name         = {{ quote .Name }}
  {{- if .Description}}
  description  = {{ quote .Description }}
  {{- end}}
  machine_type = {{ quote (machineTypeToString .MachineType) }}
  
  disk {
    source_image = {{ quote .Image }}
    auto_delete  = true
    boot         = true
    {{- if .DiskSizeGb}}
    disk_size_gb = {{ .DiskSizeGb }}
    {{- end}}
    {{- if .DiskType}}
    disk_type    = {{ quote .DiskType.String }}
    {{- end}}
  }
  
  {{- if .NetworkInterfaces}}
  {{- range .NetworkInterfaces}}
  {{- $netInterface := . }}
  network_interface {
    {{- if .Network}}
    network = {{ quote .Network }}
    {{- end}}
    {{- if .Subnetwork}}
    subnetwork = {{ quote .Subnetwork }}
    {{- end}}
    
    {{- if .AccessConfigs}}
    {{- range .AccessConfigs}}
    access_config {
      {{- if .Type}}
      nat_ip = {{ quote .Type }}
      {{- end}}
      {{- if .NatIp}}
      nat_ip = google_compute_address.{{ .NatIp }}.address
      {{- end}}
      {{- if .NetworkTier}}
      network_tier = {{ quote (networkTierToString .NetworkTier) }}
      {{- end}}
    }
    {{- end}}
    {{- end}}
  }
  {{- end}}
  {{- end}}
  
  {{- if .ServiceAccount}}
  service_account {
    email = {{ quote .ServiceAccount }}
    scopes = [
      {{- if .Scopes}}
      {{- range .Scopes}}
      {{ quote . }},
      {{- end}}
      {{- else}}
      "https://www.googleapis.com/auth/cloud-platform",
      {{- end}}
    ]
  }
  {{- end}}
  
  {{- if or .Metadata .StartupScript}}
  metadata = {
    {{- range $key, $value := .Metadata}}
    {{- if eq $key "startup-script"}}
    {{ quote $key }} = <<-EOF
{{ unescapeNewlines $value }}
EOF
    {{- else}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
    {{- end}}
    {{- if .StartupScript}}
    startup-script = <<-EOF
{{ unescapeNewlines .StartupScript }}
EOF
    {{- end}}
  }
  {{- end}}
  
  {{- if .Tags}}
  tags = [
    {{- range .Tags}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if .Labels}}
  labels = {
    {{- range $key, $value := .Labels}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}
  
  {{- if .Preemptible}}
  scheduling {
    preemptible = {{ .Preemptible }}
  }
  {{- end}}
  
  {{- if $deps.RequiresNetworking}}
  # Wait for networking resources to be ready
  depends_on = [
    {{- range $i, $net := $deps.NetworkDependencies}}
    {{- if $i}},{{end}}
    {{ $net }}
    {{- end}}
    {{- if and $deps.RequiresProjectAPIs (len $deps.ProjectAPIs)}}
    {{- if len $deps.NetworkDependencies}},{{end}}
    {{- range $i, $api := $deps.ProjectAPIs}}
    {{- if $i}},{{end}}
    google_project_service.api_{{ $i }}
    {{- end}}
    {{- end}}
  ]
  {{- end}}
}
{{- end}}
{{- end}}

{{- if $data.InstanceGroups}}
# Instance Groups
{{- range $data.InstanceGroups}}
resource "google_compute_instance_group_manager" "{{ .Name }}" {
  name               = {{ quote .Name }}
  {{- if .Description}}
  description        = {{ quote .Description }}
  {{- end}}
  {{- if .BaseInstanceName}}
  base_instance_name = {{ quote .BaseInstanceName }}
  {{- end}}
  target_size        = {{ .Size }}
  
  {{- if .Zones}}
  {{- $zoneCount := len .Zones}}
  {{- if eq $zoneCount 1}}
  zone = {{ quote (zoneToString (index .Zones 0)) }}
  {{- else}}
  # Multi-zone deployment
  zone = {{ quote (zoneToString (index .Zones 0)) }}
  {{- end}}
  {{- end}}
  
  version {
    instance_template = google_compute_instance_template.{{ .Template }}.id
  }
  
  {{- if .NamedPorts}}
  {{- range .NamedPorts}}
  named_port {
    name = {{ quote .Name }}
    port = {{ .Port }}
  }
  {{- end}}
  {{- end}}
}

{{- if .AutoScaling}}
# Auto Scaler for {{ .Name }}
resource "google_compute_autoscaler" "{{ .Name }}_autoscaler" {
  name   = "{{ .Name }}-autoscaler"
  {{- if .Zones}}
  zone   = {{ quote (zoneToString (index .Zones 0)) }}
  {{- end}}
  target = google_compute_instance_group_manager.{{ .Name }}.id

  autoscaling_policy {
    max_replicas    = {{ .AutoScaling.Max }}
    min_replicas    = {{ .AutoScaling.Min }}
    cooldown_period = {{ if .AutoScaling.CooldownPeriod }}{{ .AutoScaling.CooldownPeriod }}{{ else }}60{{ end }}

    cpu_utilization {
      target = {{ .AutoScaling.CpuTarget }}
    }
  }
}
{{- end}}
{{- end}}
{{- end}}

{{- if $data.Instances}}
# Individual Instances
{{- range $data.Instances}}
resource "google_compute_instance" "{{ .Name }}" {
  name         = {{ quote .Name }}
  machine_type = {{ quote (machineTypeToString .MachineType) }}
  zone         = {{ quote (zoneToString .Zone) }}

  boot_disk {
    initialize_params {
      image = {{ quote .Image }}
    }
  }

  {{- if .NetworkInterfaces}}
  {{- range .NetworkInterfaces}}
  {{- $netInterface := . }}
  network_interface {
    {{- if .Network}}
    network = {{ quote .Network }}
    {{- end}}
    {{- if .Subnetwork}}
    subnetwork = {{ quote .Subnetwork }}
    {{- end}}
    
    {{- if .AccessConfigs}}
    {{- range .AccessConfigs}}
    access_config {
      {{- if .NatIp}}
      nat_ip = google_compute_address.{{ .NatIp }}.address
      {{- end}}
    }
    {{- end}}
    {{- end}}
  }
  {{- end}}
  {{- end}}

  {{- if .ServiceAccount}}
  service_account {
    email  = {{ quote .ServiceAccount }}
    scopes = ["https://www.googleapis.com/auth/cloud-platform"]
  }
  {{- end}}

  {{- if .Metadata}}
  metadata = {
    {{- range $key, $value := .Metadata}}
    {{- if eq $key "startup-script"}}
    {{ quote $key }} = <<-EOF
{{ unescapeNewlines $value }}
EOF
    {{- else}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
    {{- end}}
  }
  {{- end}}

  {{- if .Tags}}
  tags = [
    {{- range .Tags}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
  
  {{- if $deps.RequiresNetworking}}
  # Wait for networking resources to be ready
  depends_on = [
    {{- range $i, $net := $deps.NetworkDependencies}}
    {{- if $i}},{{end}}
    {{ $net }}
    {{- end}}
    {{- if and $deps.RequiresProjectAPIs (len $deps.ProjectAPIs)}}
    {{- if len $deps.NetworkDependencies}},{{end}}
    {{- range $i, $api := $deps.ProjectAPIs}}
    {{- if $i}},{{end}}
    google_project_service.api_{{ $i }}
    {{- end}}
    {{- end}}
  ]
  {{- end}}
}
{{- end}}
{{- end}}
{{end}}
`

const loadBalancersTemplate = `# Load Balancers Configuration
# Generated by custoodian

{{if .}}
{{- range .}}
# Load Balancer: {{ .Name }}
resource "google_compute_global_forwarding_rule" "{{ .Name }}" {
  name       = {{ quote .Name }}
  target     = google_compute_target_http_proxy.{{ .Name }}.id
  {{- if .Ip}}
  ip_address = google_compute_address.{{ .Ip }}.address
  {{- end}}
  {{- if .PortRange}}
  port_range = {{ quote .PortRange }}
  {{- end}}
}

resource "google_compute_target_http_proxy" "{{ .Name }}" {
  name    = "{{ .Name }}-proxy"
  url_map = google_compute_url_map.{{ .Name }}.id
}

resource "google_compute_url_map" "{{ .Name }}" {
  name            = "{{ .Name }}-url-map"
  default_service = google_compute_backend_service.{{ .Name }}.id
}

resource "google_compute_backend_service" "{{ .Name }}" {
  name        = "{{ .Name }}-backend"
  protocol    = "HTTP"
  timeout_sec = 10

  backend {
    group = {{ quote .Backend }}
  }

  {{- if .HealthCheck}}
  health_checks = [google_compute_health_check.{{ .HealthCheck.Name }}.id]
  {{- end}}
}

{{- if .HealthCheck}}
resource "google_compute_health_check" "{{ .HealthCheck.Name }}" {
  name = {{ quote .HealthCheck.Name }}

  {{- if eq .HealthCheck.Type "HTTP"}}
  http_health_check {
    {{- if .HealthCheck.Port}}
    port         = {{ .HealthCheck.Port }}
    {{- end}}
    {{- if .HealthCheck.RequestPath}}
    request_path = {{ quote .HealthCheck.RequestPath }}
    {{- end}}
  }
  {{- else if eq .HealthCheck.Type "HTTPS"}}
  https_health_check {
    {{- if .HealthCheck.Port}}
    port         = {{ .HealthCheck.Port }}
    {{- end}}
    {{- if .HealthCheck.RequestPath}}
    request_path = {{ quote .HealthCheck.RequestPath }}
    {{- end}}
  }
  {{- else if eq .HealthCheck.Type "TCP"}}
  tcp_health_check {
    {{- if .HealthCheck.Port}}
    port = {{ .HealthCheck.Port }}
    {{- end}}
  }
  {{- end}}

  {{- if .HealthCheck.CheckIntervalSec}}
  check_interval_sec  = {{ .HealthCheck.CheckIntervalSec }}
  {{- end}}
  {{- if .HealthCheck.TimeoutSec}}
  timeout_sec         = {{ .HealthCheck.TimeoutSec }}
  {{- end}}
  {{- if .HealthCheck.HealthyThreshold}}
  healthy_threshold   = {{ .HealthCheck.HealthyThreshold }}
  {{- end}}
  {{- if .HealthCheck.UnhealthyThreshold}}
  unhealthy_threshold = {{ .HealthCheck.UnhealthyThreshold }}
  {{- end}}
}
{{- end}}
{{- end}}
{{end}}
`

const iamTemplate = `# IAM Configuration
# Generated by custoodian

{{- $data := .Data -}}
{{- $deps := .Dependencies -}}
{{if $data}}
{{- if $data.ServiceAccounts}}
# Service Accounts
{{- range $data.ServiceAccounts}}
resource "google_service_account" "{{ .AccountId }}" {
  account_id   = {{ quote .AccountId }}
  {{- if .DisplayName}}
  display_name = {{ quote .DisplayName }}
  {{- end}}
  {{- if .Description}}
  description  = {{ quote .Description }}
  {{- end}}
}

{{- if .Roles}}
# Service Account IAM Bindings for {{ .AccountId }}
{{- $accountId := .AccountId }}
{{- range $i, $role := .Roles}}
resource "google_project_iam_member" "{{ $accountId }}_{{ $i }}" {
  project = var.project_id
  role    = {{ quote $role }}
  member  = "serviceAccount:${google_service_account.{{ $accountId }}.email}"
}
{{- end}}
{{- end}}

{{- if .GenerateKey}}
# Service Account Key for {{ .AccountId }}
resource "google_service_account_key" "{{ .AccountId }}_key" {
  service_account_id = google_service_account.{{ .AccountId }}.name
}
{{- end}}
{{- end}}
{{- end}}

{{- if $data.RoleBindings}}
# IAM Role Bindings
{{- range $i, $binding := $data.RoleBindings}}
resource "google_project_iam_binding" "binding_{{ $i }}" {
  project = var.project_id
  role    = {{ quote $binding.Role }}

  members = [
    {{- range $binding.Members}}
    {{ quote . }},
    {{- end}}
  ]
  
  {{- if $binding.Condition}}
  condition {
    title       = {{ quote $binding.Condition.Title }}
    description = {{ quote $binding.Condition.Description }}
    expression  = {{ quote $binding.Condition.Expression }}
  }
  {{- end}}
}
{{- end}}
{{- end}}

{{- if $data.CustomRoles}}
# Custom IAM Roles
{{- range $data.CustomRoles}}
resource "google_project_iam_custom_role" "{{ .RoleId }}" {
  role_id     = {{ quote .RoleId }}
  title       = {{ quote .Title }}
  {{- if .Description}}
  description = {{ quote .Description }}
  {{- end}}
  {{- if .Stage}}
  stage       = {{ quote .Stage }}
  {{- end}}
  permissions = [
    {{- range .Permissions}}
    {{ quote . }},
    {{- end}}
  ]
}
{{- end}}
{{- end}}
{{end}}
`

const storageTemplate = `# Storage Configuration
# Generated by custoodian

{{- $data := .Data -}}
{{- $deps := .Dependencies -}}
{{if $data}}
{{- if $data.Buckets}}
# Cloud Storage Buckets
{{- range $data.Buckets}}
resource "google_storage_bucket" "{{ .Name }}" {
  name          = {{ quote .Name }}
  location      = {{ quote .Location }}
  {{- if .StorageClass}}
  storage_class = {{ quote .StorageClass }}
  {{- end}}

  {{- if .UniformBucketLevelAccess}}
  uniform_bucket_level_access = {{ .UniformBucketLevelAccess }}
  {{- end}}

  {{- if .Versioning}}
  versioning {
    enabled = {{ .Versioning }}
  }
  {{- end}}

  {{- if .Labels}}
  labels = {
    {{- range $key, $value := .Labels}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}

  {{- if .LifecycleRules}}
  {{- range .LifecycleRules}}
  lifecycle_rule {
    action {
      type = {{ quote .Action.Type }}
      {{- if .Action.StorageClass}}
      storage_class = {{ quote .Action.StorageClass }}
      {{- end}}
    }

    condition {
      {{- if .Condition.Age}}
      age = {{ .Condition.Age }}
      {{- end}}
      {{- if .Condition.CreatedBefore}}
      created_before = {{ quote .Condition.CreatedBefore }}
      {{- end}}
      {{- if .Condition.MatchesStorageClass}}
      matches_storage_class = [
        {{- range .Condition.MatchesStorageClass}}
        {{ quote . }},
        {{- end}}
      ]
      {{- end}}
    }
  }
  {{- end}}
  {{- end}}
}
{{- end}}
{{- end}}
{{end}}
`

const variablesTemplate = `# Variables
# Generated by custoodian

variable "project_id" {
  description = "The GCP project ID"
  type        = string
  {{- if .Project}}
  default     = {{ quote .Project.Id }}
  {{- end}}
}

variable "region" {
  description = "The default GCP region"
  type        = string
  default     = "us-central1"
}

variable "zone" {
  description = "The default GCP zone"
  type        = string
  default     = "us-central1-a"
}

{{- if .SecretManager}}
{{- range .SecretManager.Secrets}}
{{- if or .GetFromEnvVar .GetFromGithubSecret}}
# Variable for secret: {{ .Name }}
variable "secret_{{ .Name }}_value" {
  description = "Value for secret {{ .Name }}"
  type        = string
  sensitive   = true
  {{- if .GetFromEnvVar}}
  # Set via environment variable: {{ .GetFromEnvVar }}
  {{- else if .GetFromGithubSecret}}
  # Set via GitHub secret: {{ .GetFromGithubSecret }}
  {{- end}}
}
{{- end}}
{{- end}}
{{- end}}
`

const outputsTemplate = `# Outputs
# Generated by custoodian

{{if .Project}}
output "project_id" {
  description = "The GCP project ID"
  value       = google_project.project.project_id
}

output "project_number" {
  description = "The GCP project number"
  value       = google_project.project.number
}
{{end}}

{{if .Networking}}
{{- if .Networking.ReservedIps}}
# Reserved IP addresses
{{- range .Networking.ReservedIps}}
output "{{ .Name }}_ip_address" {
  description = "The IP address of {{ .Name }}"
  value       = google_compute_address.{{ .Name }}.address
}
{{- end}}
{{- end}}

{{- if .Networking.Vpcs}}
# VPC networks
{{- range .Networking.Vpcs}}
output "{{ .Name }}_network_id" {
  description = "The ID of the {{ .Name }} network"
  value       = google_compute_network.{{ .Name }}.id
}

output "{{ .Name }}_network_self_link" {
  description = "The self link of the {{ .Name }} network"
  value       = google_compute_network.{{ .Name }}.self_link
}

{{- if .Subnets}}
{{- range .Subnets}}
output "{{ .Name }}_subnet_id" {
  description = "The ID of the {{ .Name }} subnet"
  value       = google_compute_subnetwork.{{ .Name }}.id
}
{{- end}}
{{- end}}
{{- end}}
{{- end}}
{{end}}

{{if .Iam}}
{{- if .Iam.ServiceAccounts}}
# Service account outputs
{{- range .Iam.ServiceAccounts}}
output "{{ .AccountId }}_email" {
  description = "The email address of the {{ .AccountId }} service account"
  value       = google_service_account.{{ .AccountId }}.email
}

{{- if .GenerateKey}}
output "{{ .AccountId }}_key" {
  description = "The private key for the {{ .AccountId }} service account"
  value       = google_service_account_key.{{ .AccountId }}_key.private_key
  sensitive   = true
}
{{- end}}
{{- end}}
{{- end}}
{{end}}
`

const cloudRunTemplate = `# Cloud Run Configuration
# Generated by custoodian

{{- $data := .Data -}}
{{- $deps := .Dependencies -}}
{{if $data}}
{{- if $data.Services}}

# Cloud Run Services
{{- range $data.Services}}
{{- $service := . }}
resource "google_cloud_run_service" "{{ .Name }}" {
  name     = {{ quote .Name }}
  location = {{ quote (regionToString .Location) }}

  {{- if .Description}}
  
  metadata {
    {{- if .Labels}}
    labels = {
      {{- range $key, $value := .Labels}}
      {{ quote $key }} = {{ quote $value }}
      {{- end}}
    }
    {{- end}}
    {{- if .Annotations}}
    annotations = {
      {{- range $key, $value := .Annotations}}
      {{ quote $key }} = {{ quote $value }}
      {{- end}}
    }
    {{- end}}
  }
  {{- end}}

  template {
    {{- if .Config}}
    metadata {
      annotations = {
        # Resource limits
        {{- if .Config.Cpu}}
        "run.googleapis.com/cpu" = {{ quote .Config.Cpu }}
        {{- end}}
        {{- if .Config.Memory}}
        "run.googleapis.com/memory" = {{ quote .Config.Memory }}
        {{- end}}
        {{- if .Config.MaxInstances}}
        "autoscaling.knative.dev/maxScale" = {{ quote (printf "%d" .Config.MaxInstances) }}
        {{- end}}
        {{- if .Config.MinInstances}}
        "autoscaling.knative.dev/minScale" = {{ quote (printf "%d" .Config.MinInstances) }}
        {{- end}}
        {{- if .Config.ExecutionEnvironment}}
        "run.googleapis.com/execution-environment" = {{ quote .Config.ExecutionEnvironment }}
        {{- else}}
        "run.googleapis.com/execution-environment" = "EXECUTION_ENVIRONMENT_GEN2"
        {{- end}}
        {{- if .Config.VpcConnector}}
        "run.googleapis.com/vpc-access-connector" = {{ quote .Config.VpcConnector }}
        {{- end}}
        {{- if .Config.CpuThrottling}}
        "run.googleapis.com/cpu-throttling" = "true"
        {{- else}}
        "run.googleapis.com/cpu-throttling" = "false"
        {{- end}}
        {{- if .Config.StartupCpuBoost}}
        "run.googleapis.com/startup-cpu-boost" = "true"
        {{- end}}
      }
    }
    {{- end}}

    spec {
      {{- if .Config}}
      {{- if .Config.MaxConcurrentRequests}}
      container_concurrency = {{ .Config.MaxConcurrentRequests }}
      {{- end}}
      {{- if .Config.ServiceAccount}}
      service_account_name = {{ quote .Config.ServiceAccount }}
      {{- end}}
      {{- if .Config.TimeoutSeconds}}
      timeout_seconds = {{ .Config.TimeoutSeconds }}
      {{- end}}
      {{- end}}

      containers {
        image = {{ quote .Image }}
        {{- if .Config}}
        {{- if .Config.Port}}
        
        ports {
          container_port = {{ .Config.Port }}
        }
        {{- end}}

        {{- if or .Config.EnvVars .Config.EnvFromSecrets}}
        # Environment variables
        {{- if .Config.EnvVars}}
        {{- range $key, $value := .Config.EnvVars}}
        env {
          name  = {{ quote $key }}
          value = {{ quote $value }}
        }
        {{- end}}
        {{- end}}

        {{- if .Config.EnvFromSecrets}}
        {{- range .Config.EnvFromSecrets}}
        env {
          name = {{ quote .Name }}
          value_from {
            secret_key_ref {
              name = {{ quote .SecretName }}
              key  = {{ quote .SecretName }}
            }
          }
        }
        {{- end}}
        {{- end}}
        {{- end}}

        {{- if .Config.VolumeMounts}}
        # Volume mounts
        {{- range .Config.VolumeMounts}}
        volume_mounts {
          name       = {{ quote .Name }}
          mount_path = {{ quote .MountPath }}
        }
        {{- end}}
        {{- end}}
        {{- end}}
      }

      {{- if .Config}}
      {{- if .Config.VolumeMounts}}
      # Volumes
      {{- range .Config.VolumeMounts}}
      volumes {
        name = {{ quote .Name }}
        {{- if .Secret}}
        secret {
          secret_name = {{ quote .Secret.SecretName }}
          {{- if .Secret.Items}}
          items {
            {{- range .Secret.Items}}
            key  = {{ quote .Key }}
            path = {{ quote .Path }}
            {{- if .Mode}}
            mode = {{ .Mode }}
            {{- end}}
            {{- end}}
          }
          {{- end}}
        }
        {{- end}}
      }
      {{- end}}
      {{- end}}
      {{- end}}
    }
  }

  {{- if .Traffic}}
  # Traffic allocation
  traffic {
    {{- range .Traffic}}
    percent         = {{ .Percent }}
    {{- if .RevisionName}}
    revision_name   = {{ quote .RevisionName }}
    {{- else}}
    latest_revision = true
    {{- end}}
    {{- if .Tag}}
    tag             = {{ quote .Tag }}
    {{- end}}
    {{- end}}
  }
  {{- else}}
  traffic {
    percent         = 100
    latest_revision = true
  }
  {{- end}}

  {{- if $deps.RequiresProjectAPIs}}
  # Wait for Cloud Run API to be enabled
  depends_on = [
    {{- range $i, $api := $deps.ProjectAPIs}}
    {{- if $i}},{{end}}
    google_project_service.api_{{ $i }}
    {{- end}}
  ]
  {{- end}}
}

{{- if .IamBindings}}
# IAM bindings for {{ .Name }}
{{- range $i, $binding := .IamBindings}}
resource "google_cloud_run_service_iam_member" "{{ $service.Name }}_{{ $i }}" {
  service  = google_cloud_run_service.{{ $service.Name }}.name
  location = google_cloud_run_service.{{ $service.Name }}.location
  role     = {{ quote $binding.Role }}
  member   = {{ quote (index $binding.Members 0) }}
}
{{- end}}
{{- end}}

{{- end}}
{{- end}}

{{- if $data.VpcConnectors}}
# VPC Access Connectors
{{- range $data.VpcConnectors}}
resource "google_vpc_access_connector" "{{ .Name }}" {
  name          = {{ quote .Name }}
  ip_cidr_range = {{ quote .IpCidrRange }}
  network       = {{ quote .Network }}
  {{- if .Subnet}}
  subnet {
    name = {{ quote .Subnet }}
  }
  {{- end}}
  {{- if .MachineType}}
  machine_type = {{ quote .MachineType }}
  {{- end}}
  {{- if .MinInstances}}
  min_instances = {{ .MinInstances }}
  {{- end}}
  {{- if .MaxInstances}}
  max_instances = {{ .MaxInstances }}
  {{- end}}
  {{- if .MinThroughput}}
  min_throughput = {{ .MinThroughput }}
  {{- end}}
  {{- if .MaxThroughput}}
  max_throughput = {{ .MaxThroughput }}
  {{- end}}

  {{- if $deps.RequiresProjectAPIs}}
  depends_on = [
    {{- range $i, $api := $deps.ProjectAPIs}}
    {{- if $i}},{{end}}
    google_project_service.api_{{ $i }}
    {{- end}}
  ]
  {{- end}}
}
{{- end}}
{{- end}}

{{end}}
`

const databasesTemplate = `# Database Configuration
# Generated by custoodian

{{- $data := .Data -}}
{{- $deps := .Dependencies -}}
{{if $data}}

{{- if $data.CloudSqlInstances}}
# Cloud SQL Instances
{{- range $data.CloudSqlInstances}}
{{- $instance := . }}
resource "google_sql_database_instance" "{{ .Name }}" {
  name             = {{ quote .Name }}
  database_version = {{ quote .DatabaseVersion }}
  region           = {{ quote (regionToString .Region) }}
  
  {{- if .DeletionProtection}}
  deletion_protection = {{ .DeletionProtection }}
  {{- end}}

  settings {
    tier = {{ quote .Tier }}
    
    {{- if .Storage}}
    disk_type       = {{ quote .Storage.Type }}
    disk_size       = {{ .Storage.SizeGb }}
    disk_autoresize = {{ .Storage.AutoResize }}
    {{- if .Storage.AutoResizeLimit}}
    disk_autoresize_limit = {{ .Storage.AutoResizeLimit }}
    {{- end}}
    {{- end}}

    {{- if .Backup}}
    backup_configuration {
      enabled                        = {{ .Backup.Enabled }}
      {{- if .Backup.StartTime}}
      start_time                     = {{ quote .Backup.StartTime }}
      {{- end}}
      {{- if .Backup.PointInTimeRecoveryEnabled}}
      point_in_time_recovery_enabled = {{ .Backup.PointInTimeRecoveryEnabled }}
      {{- end}}
      {{- if .Backup.TransactionLogRetentionDays}}
      transaction_log_retention_days = {{ .Backup.TransactionLogRetentionDays }}
      {{- end}}
      {{- if .Backup.Location}}
      location = {{ quote .Backup.Location }}
      {{- end}}
    }
    {{- end}}

    {{- if .HighAvailability}}
    {{- if .HighAvailability.Enabled}}
    availability_type = {{ quote .HighAvailability.Type }}
    {{- end}}
    {{- end}}

    {{- if .Maintenance}}
    maintenance_window {
      day          = {{ .Maintenance.Day }}
      hour         = {{ .Maintenance.Hour }}
      {{- if .Maintenance.UpdateTrack}}
      update_track = {{ quote .Maintenance.UpdateTrack }}
      {{- end}}
    }
    {{- end}}

    {{- if .Network}}
    ip_configuration {
      {{- if .Network.Ipv4Enabled}}
      ipv4_enabled = {{ .Network.Ipv4Enabled }}
      {{- end}}
      
      {{- if .Network.PrivateNetwork}}
      private_network = {{ quote .Network.PrivateNetwork.PrivateNetwork }}
      {{- if .Network.PrivateNetwork.AllocatedIpRange}}
      allocated_ip_range = {{ quote .Network.PrivateNetwork.AllocatedIpRange }}
      {{- end}}
      {{- end}}

      {{- if .Network.AuthorizedNetworks}}
      {{- range .Network.AuthorizedNetworks}}
      authorized_networks {
        name  = {{ quote .Name }}
        value = {{ quote .Value }}
        {{- if .ExpirationTime}}
        expiration_time = {{ quote .ExpirationTime }}
        {{- end}}
      }
      {{- end}}
      {{- end}}

      {{- if .Network.Ssl}}
      {{- if .Network.Ssl.RequireSsl}}
      require_ssl = {{ .Network.Ssl.RequireSsl }}
      {{- end}}
      {{- if .Network.Ssl.SslMode}}
      ssl_mode = {{ quote .Network.Ssl.SslMode }}
      {{- end}}
      {{- end}}
    }
    {{- end}}

    {{- if .DatabaseFlags}}
    {{- range $key, $value := .DatabaseFlags}}
    database_flags {
      name  = {{ quote $key }}
      value = {{ quote $value }}
    }
    {{- end}}
    {{- end}}

    {{- if .Labels}}
    user_labels = {
      {{- range $key, $value := .Labels}}
      {{ quote $key }} = {{ quote $value }}
      {{- end}}
    }
    {{- end}}
  }

  {{- if .RootPassword}}
  root_password = {{ quote .RootPassword }}
  {{- end}}

  {{- if $deps.RequiresProjectAPIs}}
  # Wait for SQL Admin API to be enabled
  depends_on = [
    {{- range $i, $api := $deps.ProjectAPIs}}
    {{- if $i}},{{end}}
    google_project_service.api_{{ $i }}
    {{- end}}
  ]
  {{- end}}
}

{{- if .Databases}}
# Databases for {{ .Name }}
{{- range .Databases}}
resource "google_sql_database" "{{ $instance.Name }}_{{ .Name }}" {
  name     = {{ quote .Name }}
  instance = google_sql_database_instance.{{ $instance.Name }}.name
  {{- if .Charset}}
  charset  = {{ quote .Charset }}
  {{- end}}
  {{- if .Collation}}
  collation = {{ quote .Collation }}
  {{- end}}
}
{{- end}}
{{- end}}

{{- if .Users}}
# Users for {{ .Name }}
{{- range .Users}}
resource "google_sql_user" "{{ $instance.Name }}_{{ .Name }}" {
  name     = {{ quote .Name }}
  instance = google_sql_database_instance.{{ $instance.Name }}.name
  {{- if .Password}}
  password = {{ quote .Password }}
  {{- end}}
  {{- if .Host}}
  host     = {{ quote .Host }}
  {{- end}}
  {{- if .Type}}
  type     = {{ quote .Type }}
  {{- end}}
}
{{- end}}
{{- end}}

{{- end}}
{{- end}}

{{- if $data.CloudSpannerInstances}}
# Cloud Spanner Instances
{{- range $data.CloudSpannerInstances}}
{{- $instance := . }}
resource "google_spanner_instance" "{{ .Name }}" {
  config       = {{ quote .Config }}
  {{- if .DisplayName}}
  display_name = {{ quote .DisplayName }}
  {{- else}}
  display_name = {{ quote .Name }}
  {{- end}}
  name         = {{ quote .Name }}
  
  {{- if .NodeCount}}
  num_nodes = {{ .NodeCount }}
  {{- end}}
  {{- if .ProcessingUnits}}
  processing_units = {{ .ProcessingUnits }}
  {{- end}}

  {{- if .Labels}}
  labels = {
    {{- range $key, $value := .Labels}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}

  {{- if .ForceDestroy}}
  force_destroy = {{ .ForceDestroy }}
  {{- end}}

  {{- if $deps.RequiresProjectAPIs}}
  # Wait for Spanner API to be enabled
  depends_on = [
    {{- range $i, $api := $deps.ProjectAPIs}}
    {{- if $i}},{{end}}
    google_project_service.api_{{ $i }}
    {{- end}}
  ]
  {{- end}}
}

{{- if .Databases}}
# Spanner Databases for {{ .Name }}
{{- range .Databases}}
resource "google_spanner_database" "{{ $instance.Name }}_{{ .Name }}" {
  instance = google_spanner_instance.{{ $instance.Name }}.name
  name     = {{ quote .Name }}
  
  {{- if .DatabaseDialect}}
  database_dialect = {{ quote .DatabaseDialect }}
  {{- end}}

  {{- if .DeletionProtection}}
  deletion_protection = {{ .DeletionProtection }}
  {{- end}}

  {{- if .EnableDropProtection}}
  enable_drop_protection = {{ .EnableDropProtection }}
  {{- end}}

  {{- if .VersionRetentionPeriod}}
  version_retention_period = {{ quote .VersionRetentionPeriod }}
  {{- end}}

  {{- if .Ddl}}
  ddl = [
    {{- range .Ddl}}
    {{ quote . }},
    {{- end}}
  ]
  {{- end}}
}
{{- end}}
{{- end}}

{{- end}}
{{- end}}

{{end}}
`

const secretManagerTemplate = `# Secret Manager Configuration
# Generated by custoodian

{{- $data := .Data -}}
{{- $deps := .Dependencies -}}
{{if $data}}
{{- if $data.Secrets}}
# Secret Manager Secrets
{{- range $data.Secrets}}
{{- $secret := . }}
resource "google_secret_manager_secret" "{{ .Name }}" {
  secret_id = {{ quote .Name }}
  
  {{- if .Labels}}
  labels = {
    {{- range $key, $value := .Labels}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}
  
  {{- if .Annotations}}
  annotations = {
    {{- range $key, $value := .Annotations}}
    {{ quote $key }} = {{ quote $value }}
    {{- end}}
  }
  {{- end}}
  
  {{- if .Ttl}}
  ttl = {{ quote .Ttl }}
  {{- end}}
  
  {{- if .Topics}}
  topics {
    {{- range .Topics}}
    name = {{ quote . }}
    {{- end}}
  }
  {{- end}}
  
  {{- if .Replication}}
  replication {
    {{- if .Replication.GetAutomatic}}
    automatic = true
    {{- if .Replication.GetAutomatic.KmsKeyName}}
    customer_managed_encryption {
      kms_key_name = {{ quote .Replication.GetAutomatic.KmsKeyName }}
    }
    {{- end}}
    {{- else if .Replication.GetUserManaged}}
    user_managed {
      {{- range .Replication.GetUserManaged.Replicas}}
      replicas {
        location = {{ quote (regionToString .Location) }}
        {{- if .KmsKeyName}}
        customer_managed_encryption {
          kms_key_name = {{ quote .KmsKeyName }}
        }
        {{- end}}
      }
      {{- end}}
    }
    {{- end}}
  }
  {{- else}}
  replication {
    automatic = true
  }
  {{- end}}
  
  {{- if $deps.RequiresProjectAPIs}}
  # Wait for Secret Manager API to be enabled
  depends_on = [
    {{- range $i, $api := $deps.ProjectAPIs}}
    {{- if $i}},{{end}}
    google_project_service.api_{{ $i }}
    {{- end}}
  ]
  {{- end}}
}

# Secret version for {{ .Name }}
resource "google_secret_manager_secret_version" "{{ .Name }}_version" {
  secret = google_secret_manager_secret.{{ .Name }}.id
  
  {{- if .GetFromEnvVar}}
  # Read value from environment variable: {{ .GetFromEnvVar }}
  secret_data = var.secret_{{ .Name }}_value
  {{- else if .GetFromGithubSecret}}
  # Read value from GitHub secret: {{ .GetFromGithubSecret }}
  secret_data = var.secret_{{ .Name }}_value
  {{- else if .GetBase64Value}}
  # Decode base64 value
  secret_data = base64decode({{ quote .GetBase64Value }})
  {{- else if .GetPlainText}}
  # WARNING: Plain text value - not recommended for production
  secret_data = {{ quote .GetPlainText }}
  {{- else}}
  # Default to environment variable
  secret_data = var.secret_{{ .Name }}_value
  {{- end}}
  
  {{- if .VersionAliases}}
  depends_on = [google_secret_manager_secret.{{ .Name }}]
  {{- end}}
}

{{- if .VersionAliases}}
{{- range .VersionAliases}}
# Version alias: {{ . }}
resource "google_secret_manager_secret_version" "{{ $secret.Name }}_{{ . }}" {
  secret = google_secret_manager_secret.{{ $secret.Name }}.id
  secret_data = google_secret_manager_secret_version.{{ $secret.Name }}_version.secret_data
  
  lifecycle {
    ignore_changes = [secret_data]
  }
}
{{- end}}
{{- end}}

{{- end}}
{{- end}}

{{end}}
`
