name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1

      - name: Generate protobuf code
        run: make proto

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME=custoodian
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME=custoodian.exe
          fi
          
          go build -ldflags="-w -s -X 'custoodian/internal/cmd.version=${{ steps.version.outputs.VERSION }}' -X 'custoodian/internal/cmd.commit=${{ github.sha }}' -X 'custoodian/internal/cmd.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)'" -o $BINARY_NAME ./cmd/custoodian
          
          if [ "$GOOS" = "windows" ]; then
            zip custoodian-${{ matrix.goos }}-${{ matrix.goarch }}.zip $BINARY_NAME
          else
            tar czf custoodian-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz $BINARY_NAME
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            custoodian-*.tar.gz
            custoodian-*.zip

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            custoodian/custoodian:latest
            custoodian/custoodian:${{ steps.version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            COMMIT=${{ github.sha }}
            DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          echo "# Release ${{ steps.version.outputs.VERSION }}" > release-notes.md
          echo "" >> release-notes.md
          echo "## What's Changed" >> release-notes.md
          echo "" >> release-notes.md
          
          # Extract commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            git log --pretty=format:"- %s (%an)" $PREV_TAG..HEAD >> release-notes.md
          else
            echo "- Initial release" >> release-notes.md
          fi
          
          echo "" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Download Binary" >> release-notes.md
          echo "" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo '# Linux' >> release-notes.md
          echo 'curl -L -o custoodian https://github.com/custoodian/custoodian/releases/download/${{ steps.version.outputs.VERSION }}/custoodian-linux-amd64.tar.gz' >> release-notes.md
          echo 'tar xzf custoodian-linux-amd64.tar.gz' >> release-notes.md
          echo 'sudo mv custoodian /usr/local/bin/' >> release-notes.md
          echo '' >> release-notes.md
          echo '# macOS' >> release-notes.md
          echo 'curl -L -o custoodian https://github.com/custoodian/custoodian/releases/download/${{ steps.version.outputs.VERSION }}/custoodian-darwin-amd64.tar.gz' >> release-notes.md
          echo 'tar xzf custoodian-darwin-amd64.tar.gz' >> release-notes.md
          echo 'sudo mv custoodian /usr/local/bin/' >> release-notes.md
          echo '```' >> release-notes.md
          echo "" >> release-notes.md
          echo "### Docker" >> release-notes.md
          echo "" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo 'docker pull custoodian/custoodian:${{ steps.version.outputs.VERSION }}' >> release-notes.md
          echo '```' >> release-notes.md
          echo "" >> release-notes.md
          echo "### GitHub Action" >> release-notes.md
          echo "" >> release-notes.md
          echo '```yaml' >> release-notes.md
          echo 'uses: custoodian/custoodian@${{ steps.version.outputs.VERSION }}' >> release-notes.md
          echo 'with:' >> release-notes.md
          echo '  config-file: infrastructure/config.textproto' >> release-notes.md
          echo '```' >> release-notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: release-notes.md
          files: |
            custoodian-*.tar.gz
            custoodian-*.zip
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: success()
    
    steps:
      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#releases'
          text: |
            🚀 Custoodian ${{ steps.version.outputs.VERSION }} has been released!
            
            📦 Download: https://github.com/custoodian/custoodian/releases/tag/${{ steps.version.outputs.VERSION }}
            🐳 Docker: `custoodian/custoodian:${{ steps.version.outputs.VERSION }}`
            🔧 GitHub Action: `custoodian/custoodian@${{ steps.version.outputs.VERSION }}`
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}